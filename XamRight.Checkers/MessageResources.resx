<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddSuffixCodeFixMessage" xml:space="preserve">
    <value>Add '{0}' suffix</value>
  </data>
  <data name="DeleteUnnecessaryAttributeCodeFixMessage" xml:space="preserve">
    <value>Delete unnecessary {0}</value>
  </data>
  <data name="IgnoredLayoutAttrOnAbsoluteLayoutWarning" xml:space="preserve">
    <value>'{0}' declaration on child view of AbsoluteLayout is ignored. Use AbsoluteLayout.LayoutBounds property to position views</value>
  </data>
  <data name="RedundantLayoutExpansionOnStackLayoutWarning" xml:space="preserve">
    <value>Inaccurate usage of 'AndExpand' suffix on '{0}' Options declaration. 'Expand' is only relevant when applied to LayoutOptions in the direction of the Stack Orientation</value>
  </data>
  <data name="RedundantLayoutOptionsOnStackLayoutWarning" xml:space="preserve">
    <value>Redundant '{0}' Options declaration. Start, Center, End, and Fill only apply to Layout Options opposite the direction of the Stack Orientation</value>
  </data>
  <data name="RemoveCodeFixMessage" xml:space="preserve">
    <value>Remove {0}</value>
  </data>
  <data name="RemoveSuffixCodeFixMessage" xml:space="preserve">
    <value>Remove '{0}' suffix</value>
  </data>
  <data name="StackLayoutOneChildWarning" xml:space="preserve">
    <value>StackLayout element has a single child {0}; consider removing StackLayout to improve layout performance</value>
  </data>
  <data name="MultipleElementsWithIdenticalTextWarning" xml:space="preserve">
    <value>The text set for '{0}' to describe '{1}' is also used on '{2}'. Consider unique control descriptions so screen reader users can distinguisih them.</value>
  </data>
  <data name="RedundantLayoutOptionsOnRelativeLayoutChildWarning" xml:space="preserve">
    <value>'{0}' declaration on child view of RelativeLayout is ignored. Use RelativeLayout's Constraint properties to position views</value>
  </data>
  <data name="EventTriggerEventEmptyWarning" xml:space="preserve">
    <value>Property Event on EventTrigger does not have a value</value>
  </data>
  <data name="NestedScrollableLayoutsWarning" xml:space="preserve">
    <value>Do not nest a '{0}' within another scrollable layout; see parent layout on line '{1}'</value>
  </data>
  <data name="BindableLayoutDataTemplateWarning" xml:space="preserve">
    <value>Contents of BindableLayout.ItemTemplate's DataTemplate cannot be wrapped in a ViewCell</value>
  </data>
  <data name="BindableLayoutItemTemplateWarning" xml:space="preserve">
    <value>BindableLayout.ItemTemplate can only have one child node and the child node must be a DataTemplate tag</value>
  </data>
  <data name="InsertPropertyCodeFixMessage" xml:space="preserve">
    <value>Insert '{0}' property</value>
  </data>
  <data name="NoEventPropertyOnEventTriggerWarning" xml:space="preserve">
    <value>EventTrigger does not serve a purpose because the Event property is not set</value>
  </data>
  <data name="CollectionViewDataTemplateContentWarning" xml:space="preserve">
    <value>Contents of CollectionView.ItemTemplate's DataTemplate cannot be wrapped in a ViewCell</value>
  </data>
  <data name="CollectionViewItemTemplateContentWarning" xml:space="preserve">
    <value>CollectionView.ItemTemplate can only have one child node and the child node must be a DataTemplate tag</value>
  </data>
  <data name="CollectionViewSelectionChangedWarning" xml:space="preserve">
    <value>The method added to the CollectionView's SelectionChanged command will not execute because the CollectionView's SelectionMode is set to SelectionMode.None</value>
  </data>
  <data name="ListViewDataTemplateContentWarning" xml:space="preserve">
    <value>DataTemplate for '{0}' can only have one child that must be of, or derive from, type ViewCell</value>
  </data>
  <data name="ListViewDataTemplateForHeaderFooterContentWarning" xml:space="preserve">
    <value>The DataTemplate layout for '{0}' cannot be wrapped in a ViewCell</value>
  </data>
  <data name="ListViewDataTemplateMoreThanOneChildWarnning" xml:space="preserve">
    <value>DataTemplate can only have one child</value>
  </data>
  <data name="ListViewDoesNotSetHasUnevenRowsWarning" xml:space="preserve">
    <value>HasUnevenRows on '{0}' is not set to true, so cell contents may not be fully visible when using accessibility setting to increase font size </value>
  </data>
  <data name="ListViewItemTemplateContentWarning" xml:space="preserve">
    <value>{0} can only have one child node and the child node must be a DataTemplate tag</value>
  </data>
  <data name="MissingAutomationPropertiesToHintListViewContextActionsWarning" xml:space="preserve">
    <value>Layout in the '{0}' may be missing AutomationProperties to inform screen reader users about the context actions available for items in the '{1}'. Consider adding AutomationProperties describing what context actions are available and how to access them</value>
  </data>
  <data name="ReplaceAttributeValueCodeFixMessage" xml:space="preserve">
    <value>Replace value of '{0}' with '{1}'</value>
  </data>
  <data name="ButtonCommandIsEnabledWarning" xml:space="preserve">
    <value>IsEnabled on Button with Command may misbehave; prefer Command.CanExecute to IsEnabled</value>
  </data>
</root>